it "stubs instance methods on real objects" do
  time = Time.new(2010, 1, 1, 12, 0, 0)
  allow(time).to receive(:year).and_return(1975)

  expect(time.to_s).to eq('2010-01-01 12:00:00 -0500')
  expect(time.year).to eq(1975)
end

# As we can see, "allow" creates a partial stub, that doesn't change the
# object itslef. But when we call a particular methods specified in stub
# it returns the data we asked it to return

# We can do it with our own custom classes

it "stubs instance methods on real objects" do
  hero = SuperHero.new
  hero.name = "Superman"
  expect(hero.name).to eq('Superman')

  allow(hero).to receive(:name).and_return('Clark Kent')

  expect(hero.name).to eq('Clark Kent')
end

# We did it with an instance methods, but we can do it with class methods aswell
it "stubs class methods on real objects" do
  fixed = Time.new(2010, 1, 1, 12, 0, 0)
  allow(Time).to receive(:now).and_return(fixed)

  expect(Time.now).to eq(fixed)
  expect(Time.now.year).to eq(2010)
end

# It's really usefull when you want object to return another mock objet as
# as a result. For example if you want to simulate a call to a database, or 
# to a file to retrieve data. Maybe you don't want to take the time to make 
# that trip or you want to have more control over the object that will be
# returned

it "can stub database calls" do
  dbl = double('Mock Customer')
  allow(dbl).to receive(:name).and_return('Bob')

  allow(Customer).to receive(:find).and_return(dbl)

  customer = Customer.find
  epxect(customer.name).to eq('Bob')
end

it "can stub database calls" do
  c1 = double("First Customer", name: "Bob")
  c2 = double("Second Customer"), name: "Marry"

  allow(Customer).to
    receive(:all).and_return([c1, c2])

    customers = Customer.all
  expect(customers[0].name).to eq("Bob")
end


